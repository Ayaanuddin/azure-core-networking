# This pipeline manually installs Terraform and uses AzureCLI for plan/apply
# to overcome persistent bugs and environment PATH issues.

trigger:
- master

pool:
  # IMPORTANT: If your parallelism grant is not approved, replace 'ubuntu-latest' 
  # with the name of your self-hosted agent pool (e.g., name: 'Default').
  vmImage: 'ubuntu-latest'
  # name: 'Default' # <-- Use this line if using a self-hosted agent

variables:
  # The location where Terraform will store its state file
  backendResourceGroupName: 'rg-terraform-backend'
  backendStorageAccountName: 'tredenceterraformstate'
  backendContainerName: 'tfstate'
  # Naming convention for the deployed infrastructure
  resourceGroupName: 'rg-core-networking-dev'
  location: 'eastus'

stages:
- stage: DeployInfrastructure
  displayName: 'Deploy Core Infrastructure'
  jobs:
  - job: DeployInfrastructure
    displayName: 'Terraform Execution'
    steps:
    
    # 1. Manual Install Terraform 1.4.6
    - task: Bash@3
      displayName: 'Manual Install Terraform 1.4.6'
      inputs:
        targetType: 'inline'
        script: |
          TERRAFORM_VERSION="1.4.6"
          echo "Installing Terraform version ${TERRAFORM_VERSION} manually..."
          curl -o terraform.zip https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
          unzip terraform.zip
          sudo mv terraform /usr/local/bin/
          terraform version

    # 2. Terraform Initialization (Init)
    - task: AzureCLI@2
      displayName: 'Terraform Init (Backend Setup)'
      inputs:
        connectedServiceNameARM: 'Azure-Tredence-DevOps-ARM' 
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          terraform init \
            -backend-config="resource_group_name=$(backendResourceGroupName)" \
            -backend-config="storage_account_name=$(backendStorageAccountName)" \
            -backend-config="container_name=$(backendContainerName)" \
            -backend-config="key=core-networking-dev.tfstate"

    # 3. Terraform Plan
    - task: AzureCLI@2
      displayName: 'Terraform Plan'
      inputs:
        connectedServiceNameARM: 'Azure-Tredence-DevOps-ARM'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        # Creates the plan file named 'tfplan' in the working directory
        inlineScript: |
          terraform plan -out=tfplan \
            -var="resource_group_name=$(resourceGroupName)" \
            -var="location=$(location)"
          
    # 4. Terraform Apply (FIXED: Referencing the file using the relative path)
    - task: AzureCLI@2
      displayName: 'Terraform Apply'
      inputs:
        connectedServiceNameARM: 'Azure-Tredence-DevOps-ARM'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        # Now correctly references the plan file as './tfplan'
        inlineScript: |
          terraform apply -auto-approve ./tfplan

    # 5. Clean Up
    - task: Bash@3
      displayName: 'Clean Up Plan File'
      condition: always()
      inputs:
        targetType: 'inline'
        script: |
          # Remove the tfplan file after use
          rm -f tfplan
          echo "tfplan file removed."