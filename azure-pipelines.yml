# azure-pipelines.yml: Azure DevOps Pipeline for Terraform Infrastructure and App Service Deployment

trigger:
  branches:
    include:
      - master # Trigger on changes to the master branch
  paths:
    include:
      - '*.tf'
      - '*.tfvars'
      - azure-pipelines.yml

# VARIABLES: Set your environment and Azure Service Connection details
variables:
  - group: Azure-Terraform-Secrets # Use a variable group for credentials/backend state config
  - name: terraformVersion
    value: '1.4.6' # Specify the desired Terraform version
  - name: azureServiceConnection
    value: 'Azure-Tredence-DevOps-ARM' # This value matches the connection we created

stages:
- stage: IaC_Deployment
  displayName: Terraform Deployment (Init, Plan, Apply)
  jobs:
  - job: DeployInfrastructure
    displayName: Deploy Azure Infrastructure
    pool:
      vmImage: 'ubuntu-latest' # Use a modern Linux agent

    steps:
    # 1. Install Terraform (MUST KEEP THIS)
    - task: TerraformInstaller@2
      displayName: 'Install Terraform $(terraformVersion)'
      inputs:
        terraformVersion: '$(terraformVersion)'

    # 2. Configure Azure Backend (using AzureCLI to perform Init)
    - task: AzureCLI@2
      displayName: 'Terraform Init (Remote State)'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          terraform init \
            -backend-config="resource_group_name=$(BackendResourceGroupName)" \
            -backend-config="storage_account_name=$(BackendStorageAccountName)" \
            -backend-config="container_name=$(BackendContainerName)" \
            -backend-config="key=azure-core-networking.terraform.tfstate"

    # 3. Terraform Validate (Using AzureCLI for consistency)
    - task: AzureCLI@2
      displayName: 'Terraform Validate'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          terraform validate

    # 4. Terraform Plan (FIXED: Using AzureCLI to run the raw command)
    - task: AzureCLI@2
      displayName: 'Terraform Plan'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # The -out flag guarantees the plan is saved in the working directory.
          terraform plan -out=tfplan

    # 5. Terraform Apply (FIXED: Using AzureCLI to run the raw command)
    - task: AzureCLI@2
      displayName: 'Terraform Apply'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # We pass the saved plan file directly to the apply command.
          terraform apply -auto-approve tfplan
